# -*- coding: utf-8 -*-
"""CodeCase2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tfo8uoJcCScoTySbfUCcY6i69rJ-aDGe
"""

import geopandas as gpd
import pandas as pd
from scipy.spatial.distance import cdist
import matplotlib.pyplot as plt
from shapely.geometry import LineString
from sklearn.cluster import DBSCAN

"""# **Import and merge data**"""

gdfb = gpd.read_file('/content/drive/MyDrive/City_Waterfalls.geojson')
gdfb.head()

dfg2=gdfb[gdfb['OWNERSHIP']=='public']
dfg2.shape

dfg2.to_excel('Datav1.xlsx', index=True)

df = pd.read_excel('/content/drive/MyDrive/rating_public_falls.xlsx')
rate = df.drop(df.columns[0], axis=1)
rate.columns

gdfb = gdfb.merge(rate[['OBJECTID', 'Weight Rating','Total Votes']], on='OBJECTID', how='left', suffixes=('_gdfb', '_rate'))

gdfb.columns

gdfb.isnull().sum()

gdfb.head(20)

gdfb3=gdfb.drop(['ALTERNATE_NAME'], axis=1)
gdfb3.columns

#df.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')
gdfb3.isnull().sum()

gdfb3=gdfb3.dropna(subset=['Weight Rating'])
gdfb3.isnull().sum()

gdfb3.shape

gdfb3.head(21)

gdf=gdfb3.copy()

"""# **Aplying Nearest Neighbors**"""

# Extraer nodos desde los extremos de cada calle
gdf["x"] = gdf.geometry.x #inicial
gdf["y"] = gdf.geometry.y #final
gdf.sample(5)

coords = gdf[["x", "y"]].values

# DBSCAN con parámetros ajustados (ejemplo, prueba)
db = DBSCAN(eps=0.03, min_samples=2)  # Aumenta eps para que agrupe más puntos
gdf["cluster"] = db.fit_predict(coords)
gdf

fig, ax = plt.subplots(figsize=(10, 10))
gdf.plot(ax=ax, column="cluster", categorical=True, legend=True, cmap="Set1", markersize=20)

for x, y, label in zip(gdf.geometry.x, gdf.geometry.y, gdf["OBJECTID"]):
    ax.text(x, y, label, fontsize=9, ha='right', va='bottom')

plt.title("Clusters con DBSCAN")
plt.xlabel("x")
plt.ylabel("y")
plt.show()

print(gdf[["OBJECTID", "NAME", "cluster"]])

gdf.to_excel('Data_cluster.xlsx', index=True)